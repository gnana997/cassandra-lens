{
  "name": "Cassandra Query Language",
  "scopeName": "source.cql",
  "fileTypes": ["cql"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#data-types" },
    { "include": "#functions" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.cql",
          "match": "--.*$"
        },
        {
          "name": "comment.block.cql",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.cql",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.cql",
              "match": "''|\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.cql",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.cql",
              "match": "\"\"|\\\\."
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ddl.cql",
          "match": "\\b(?i:CREATE|ALTER|DROP|TRUNCATE|DESCRIBE|DESC)\\b"
        },
        {
          "name": "keyword.control.dml.cql",
          "match": "\\b(?i:SELECT|INSERT|UPDATE|DELETE|BATCH|BEGIN|APPLY|USE)\\b"
        },
        {
          "name": "keyword.other.clause.cql",
          "match": "\\b(?i:FROM|WHERE|SET|VALUES|LIMIT|ORDER\\s+BY|GROUP\\s+BY|ALLOW\\s+FILTERING|WITH|AND|OR|NOT|IN|CONTAINS|LIKE|IS|NULL|IF|EXISTS|ASC|DESC|DISTINCT|COUNT|AS|ON|INTO|USING|TTL|TIMESTAMP|WRITETIME|TOKEN|KEY|KEYSPACE|KEYSPACES|TABLE|TABLES|INDEX|MATERIALIZED\\s+VIEW|TYPE|FUNCTION|AGGREGATE|TRIGGER|ROLE|USER|PERMISSION|PERMISSIONS|SCHEMA|COLUMNFAMILY|OF|TO|REPLACE|UNLOGGED|COUNTER|STATIC|FROZEN|TUPLE|PRIMARY\\s+KEY|CLUSTERING\\s+ORDER|COMPACT\\s+STORAGE|COMPRESSION|REPLICATION|DURABLE_WRITES)\\b"
        },
        {
          "name": "keyword.operator.logical.cql",
          "match": "\\b(?i:AND|OR|NOT)\\b"
        },
        {
          "name": "constant.language.boolean.cql",
          "match": "\\b(?i:TRUE|FALSE)\\b"
        },
        {
          "name": "constant.language.null.cql",
          "match": "\\b(?i:NULL)\\b"
        }
      ]
    },
    "data-types": {
      "patterns": [
        {
          "name": "storage.type.cql",
          "match": "\\b(?i:ASCII|BIGINT|BLOB|BOOLEAN|COUNTER|DATE|DECIMAL|DOUBLE|DURATION|FLOAT|INET|INT|SMALLINT|TEXT|TIME|TIMESTAMP|TIMEUUID|TINYINT|UUID|VARCHAR|VARINT|LIST|SET|MAP|TUPLE|FROZEN)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.aggregate.cql",
          "match": "\\b(?i:COUNT|SUM|AVG|MIN|MAX)\\b"
        },
        {
          "name": "support.function.scalar.cql",
          "match": "\\b(?i:NOW|UUID|DATEOF|UNIXTIMESTAMPOF|TODATE|TOTIMESTAMP|TOUNIXTIMESTAMP|WRITETIME|TTL|TOKEN|BLOBASTEXT|TEXTASBLOB|BLOBASTINYINT|TINYINTASBLOB|BLOBASSMALLINT|SMALLINTASBLOB|BLOBASINT|INTASBLOB|BLOBASBIGINT|BIGINTASBLOB|BLOBASVARINT|VARINTASBLOB|BLOBASFLOAT|FLOATASBLOB|BLOBASDOUBLE|DOUBLEASBLOB|BLOBASDECIMAL|DECIMALASBLOB)\\b"
        },
        {
          "name": "support.function.collection.cql",
          "match": "\\b(?i:CAST|CONTAINS|KEYS|VALUES|ENTRIES)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.cql",
          "match": "=|!=|<>|<|>|<=|>="
        },
        {
          "name": "keyword.operator.arithmetic.cql",
          "match": "\\+|-|\\*|/"
        },
        {
          "name": "keyword.operator.assignment.cql",
          "match": "="
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.cql",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.float.cql",
          "match": "\\b[0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.numeric.integer.cql",
          "match": "\\b[0-9]+\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.quoted.cql",
          "match": "\"[^\"]+\""
        },
        {
          "name": "variable.other.cql",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
